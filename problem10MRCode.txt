package problem10;

import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class TopSuccess 
{
	public static class SuccessMapper extends Mapper<LongWritable,Text,Text,Text>
	{
	public void map(LongWritable key,Text value,Context context) throws IOException,InterruptedException
	{
		try
		{
			

			String str[] =value.toString().split("\t");

			String case_status=str[1];
			String job_title=str[4];
			
			

		context.write(new Text(job_title),new Text(case_status));

		}
		catch(Exception e)
		{
		System.out.println(e.getMessage());
		}
	}
	
	}
	
	public static class SuccessReducer extends Reducer<Text,Text,NullWritable,Text>
	{
		TreeMap<Double,Text> topMap=new TreeMap<Double,Text>();

		public void reduce(Text key,Iterable<Text> values,Context context)
			{
		
			double success_rate=0;
			int petitions=0,valid_app=0;
			int certified=0,certified_withdrawn=0;
			
			String myvalue=null;
			String mykey=key.toString();
			for(Text val:values)
			{
				petitions++;
				
				String case_status=val.toString();

				if(case_status.equals("CERTIFIED"))
				{
					certified++;
				}
				else if(case_status.equals("CERTIFIED WITHDRAWN"))
				{
					certified_withdrawn++;
				}
		
			}
		
			if(petitions>10000)
			{
			valid_app=certified+certified_withdrawn;	
			success_rate=(double)valid_app*100/(double)petitions;

			String mysuccessRate=String.format("%.2f",success_rate);
			String mypetitions=String.format("%.d", petitions);
			 myvalue=mykey+"\t"+mypetitions+"\t"+mysuccessRate;
			}
			if(success_rate >70.00)
			{
				topMap.put(new Double(success_rate),new Text(myvalue));
				if(topMap.size() >10)
				{
					topMap.remove(topMap.firstKey());
				}
			}
		}
		public void cleanup(Context context) throws IOException, InterruptedException
		{
			for(Text t:topMap.descendingMap().values()) 
			{
				context.write(NullWritable.get(),new Text(t));
			}
		}
	}
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException
		{
		Configuration conf= new Configuration();
		Job job=Job.getInstance(conf);
		job.setJarByClass(TopSuccess.class);
		
		job.setMapperClass(SuccessMapper.class);
		job.setReducerClass(SuccessReducer.class);

		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);

		job.setOutputKeyClass(NullWritable.class);
		job.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job,new Path(args[0]));
		  FileOutputFormat.setOutputPath(job,new Path(args[1]));
		  System.exit(job.waitForCompletion(true)?0:1);
		
		}
}
